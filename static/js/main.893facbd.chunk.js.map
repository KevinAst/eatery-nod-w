{"version":3,"sources":["util/verify.js","util/notify.js","util/layout/MainLayout.js","util/layout/AppLayout.js","util/SplashScreen.js","TempList.js","util/serviceWorker.js","index.js"],"names":["verify","condition","msg","Error","prefix","msgPrefix","withStyles","theme","variantSuccess","whiteSpace","variantInfo","variantWarning","variantError","props","react_default","a","createElement","build","maxSnack","dense","className","classes","NotifyAPI_withSnackBar","children","_singleton","NotifyAPI","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","assertThisInitialized","_this2","_ref","undefined","_ref$duration","duration","_ref$level","level","_ref$position","position","_ref$modal","modal","_ref$actions","actions","unknownArgs","objectWithoutProperties","check","isString","levelVariant","keys","anchorOrigin","isArray","forEach","action","indx","txt","isFunction","unknownArgKeys","autoHideDuration","actionsCbMap","reduce","map","identityFn","actionButtons","Button_default","key","color","size","snackbarKey","enqueueSnackbar","variant","onClickAction","e","closeSnackbar","clientAction","target","textContent","setTimeout","Fragment","React","Component","success","info","warn","error","top-left","vertical","horizontal","top-center","top-right","bottom-left","bottom-center","bottom-right","p","withSnackbar","notify","directive","display","toastBase","_ref2","_ref2$duration","funcQual","toast","alertBase","_ref3","alert","confirmBase","_ref4","confirm","displayName","lightTheme","createMuiTheme","typography","useNextVariants","palette","type","darkTheme","MainLayout","isThemeLight","themeInUse","styles","CssBaseline_default","main","defaultProps","width","AppLayout","title","bottomBarContent","_React$useState","useState","_React$useState2","slicedToArray","anchorUserMenu","setAnchorUserMenu","userMenuOpen","Boolean","handleUserMenuClose","_React$useState3","_React$useState4","leftNavVisible","setLeftNavVisible","closeLeftNav","handleLeftNavOp","myListItem","ListItem_default","button","onClick","ListItemIcon_default","MoveToInbox_default","Mail_default","ListItemText_default","primary","ListItemSecondaryAction_default","Typography_default","layout_MainLayout","app","AppBar_default","appBar","Toolbar_default","toolbar","disableGutters","IconButton_default","menuButton","Menu_default","component","noWrap","Badge_default","badgeContent","Notifications_default","event","currentTarget","AccountCircle_default","core_Menu_default","anchorEl","transformOrigin","open","onClose","MenuItem_default","Drawer_default","leftNav","onKeyDown","grow","List_default","Divider_default","content","bottomBar","top","bottom","alignItems","marginRight","flexGrow","height","overflow","paddingTop","paddingBottom","Transition","Slide_default","assign","direction","timeout","SplashScreen","fullScreen","Dialog_default","TransitionComponent","DialogTitle_default","DialogContent_default","favicon","src","alt","LinearProgress_default","progress","SplashScreen_withStyles","common","white","backgroundColor","margin","spacing","unit","withMobileDialog","breakpoint","showEateryDetail","myListItems","num","myList","i","push","divider","Restaurant_default","secondary","list","splashVisible","setSplashVisible","layout_AppLayout","util_SplashScreen","window","location","hostname","match","ReactDOM","render","src_TempList","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.893facbd.chunk.js","sourcesContent":["/**\r\n * A convenience assertion utility, typically used to validate\r\n * pre-conditions of a routine.\r\n *\r\n * **Advanced**: verify.prefix(msgPrefix) returns a higher-order\r\n *               verify() function where all messages are prefixed.\r\n *\r\n * @param {truthy} condition - a \"truthy\" condition which\r\n * must be satisfied.\r\n *\r\n * @param {string} msg - a message clarifying the condition being\r\n * checked.\r\n * \r\n * @throws {Error} an Error is thrown when the supplied condition is\r\n * NOT met.\r\n * \r\n * @private\r\n */\r\nexport default function verify(condition, msg) {\r\n  if (!condition) {\r\n    // TODO: don't think there is any benefit in logging this console.error \r\n    // console.error(`verify() constraint issue: ${msg}`); // supplement exception with error log (for react-native exposure)\r\n    throw new Error(msg);\r\n  }\r\n}\r\n\r\nverify.prefix = function(msgPrefix) {\r\n  return (condition, msg) => verify(condition, msgPrefix+msg);\r\n};\r\n","import React              from 'react';\r\nimport verify             from './verify';\r\nimport {SnackbarProvider,\r\n        withSnackbar}     from 'notistack';\r\nimport {withStyles}       from '@material-ui/core/styles';\r\nimport Button             from \"@material-ui/core/Button\";\r\nimport isString           from 'lodash.isstring';\r\nimport isFunction         from 'lodash.isfunction';\r\n\r\n/* eslint-disable react/jsx-pascal-case */  // for: <NotifyAPI_withSnackBar>\r\n\r\n/**\r\n * The Notify component provides user notifications through a visual\r\n * message dialog.\r\n *\r\n * User messages are initiated through a programmatic invocation,\r\n * using the functional notify() API.  Supplied directives support\r\n * a variety of scenarios, including:\r\n *   - action buttons (for acknowledgment, or confirmation, etc.)\r\n *   - timed closure of the message\r\n *   - msg levels of success, info, warn, error (impacting the dialog style/color)\r\n *   - modal and non-modal\r\n *\r\n * Notify is the fundamental component which is the basis of various\r\n * UI notifications (i.e. Toasts, Alerts, Confirmations, etc.).  It\r\n * can be used stand-alone, or indirectly through various wrappers\r\n * (promoted through named exports).  The following functions are\r\n * summarized as follows:\r\n *\r\n * ```\r\n *                                                                 auto-close         variant-color      screen           ??TODO client\r\n *                 params:                         msg             duration           level              position         modal  actions\r\n *                 ============================    ==============  =================  =================  ===============  =====  ==========================\r\n *   - notify .... ({msg,                          msg to display  1-20 seconds       'success': green   'top-left'       false  [ {txt, [action]}, ... ]\r\n *                   duration=5,                   ... supports    null: close        'info':    blue    'top-center'     true   - where action: () => void\r\n *                   level='success',                  cr/lf             via          'warn':    yellow  'top-right'             - actions ARE OPTIONAL\r\n *                   position='bottom-left',                             client       'error':   red     'bottom-left'           - ALL actions auto close\r\n *                   modal=false,                                        action                          'bottom-center'  \r\n *                   actions=[]})                                        DEFAULT: OK                     'bottom-right'\r\n *                   \r\n *   - toast ..... ({msg, duration=5, actions})                    ditto              via toast.xyz()    'bottom-left'    false  ditto\r\n *   - alert ..... ({msg, actions})                                null               via alert.xyz()    'top-center'     true   ditto\r\n *   - confirm ... ({msg, actions})                                null               via confirm.xyz()  'top-right'      true   requires client action(s)\r\n * ```\r\n *\r\n * **Setup**:\r\n *\r\n *   The Notify component is tightly controlled as a single instance\r\n *   within an entire app.  Therefore, one and only one Notify\r\n *   instance must be pre-instantiated (initially hidden) somewhere at\r\n *   the top-level of your app.\r\n *\r\n *     ```\r\n *       <React.Fragment>\r\n *         <Notify/>\r\n *         {app content}\r\n *       </React.Fragment>\r\n\r\n *       -or-\r\n *       <Notify>\r\n *         {app content}\r\n *       <Notify>\r\n *     ```\r\n * \r\n * **Usage**:\r\n * \r\n *   see docs below: `notify()`, `toast()`, `alert()`, `confirm()`\r\n * \r\n * **Module Note**:\r\n *\r\n *   This utility is housed in a lower-case `notify.js` module,\r\n *   because the general public API is a series of lower-case \"named\r\n *   exported\" functions: `notify()`, `toast()`, `alert()`,\r\n *   `confirm()`.\r\n * \r\n *   There is a \"default exported\" Notify component (which is somewhat\r\n *   unusual to find in a lower-case module), but is only used once at\r\n *   app startup, so is therefore justified (in this case).\r\n */\r\n\r\n//***\r\n//*** the top-level Notify component conveniently auto-injects the notistack <SnackbarProvider>\r\n//*** (required for our programmatic interface)\r\n//***\r\n\r\nfunction Notify(props) {\r\n  return (\r\n    <SnackbarProvider maxSnack={3} dense={true} className={props.classes.variantSuccess}>\r\n      <NotifyAPI_withSnackBar>\r\n        {props.children}\r\n      </NotifyAPI_withSnackBar>\r\n    </SnackbarProvider>\r\n  );\r\n}\r\n\r\n// apply snackbar variant style changes in support cr/lf\r\n// ... via: whiteSpace of 'pre-line'\r\n// ... this honors cr/lf within our snackbar items\r\nconst crlfStyles = (theme) => ({\r\n  variantSuccess: {\r\n    whiteSpace: 'pre-line',\r\n  },\r\n  variantInfo: {\r\n    whiteSpace: 'pre-line',\r\n  },\r\n  variantWarning: {\r\n    whiteSpace: 'pre-line',\r\n  },\r\n  variantError: {\r\n    whiteSpace: 'pre-line',\r\n  },\r\n});\r\nexport default withStyles(crlfStyles)(Notify);\r\n\r\n\r\n//***\r\n//*** keep track of our one-and-only instance\r\n//***\r\n\r\nlet _singleton = null;\r\n\r\n\r\n//***\r\n//*** the NotifyAPI component provides our internal programmatic API\r\n//*** (see .display()), used by notify(), toast(), etc.\r\n//***\r\n\r\nclass NotifyAPI extends React.Component {\r\n\r\n  static propTypes = { // expected component props\r\n  }\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n\r\n    // keep track of our one-and-only instance\r\n    verify(!_singleton, '<Notify> only ONE Notify instance should be instantiated in the app (at the top-level).');\r\n    _singleton = this;\r\n  }\r\n\r\n  // display() is the interface point to our programmatic API (notify(), toast(), etc.)\r\n  display({msg,\r\n           duration=5, // auto close duration in seconds ... DEFAULT: 5 ... use null - manual close (via actions [default to OK])\r\n           level='success',\r\n           position='bottom-left',\r\n           modal=false,\r\n           actions=[],\r\n           ...unknownArgs}={}) {\r\n\r\n    // validate the named parameters (i.e. the directive)\r\n    const check = verify.prefix('notify() parameter violation: '); // NOTE: we pretend we are: notify() (the public access point)\r\n\r\n    // ... msg\r\n    check(msg, 'directive.msg is required');\r\n    check(isString(msg),  'msg must be a string');\r\n\r\n    // ... duration\r\n    if (duration !== null) {\r\n      check(duration >= 1 && duration <= 20, `supplied duration (${duration}) must be a number between 1 and 20 (inclusive).`);\r\n    }\r\n\r\n    // ... level\r\n    check(levelVariant[level], `invalid level: '${level}', expecting one of ${Object.keys(levelVariant)}.`);\r\n\r\n    // ... position\r\n    check(anchorOrigin[position], `invalid position: '${position}', expecting one of ${Object.keys(anchorOrigin)}.`);\r\n\r\n    // ... modal\r\n    check(modal===true || modal===false, `supplied modal (${modal}) must be a boolean true/false.`);\r\n\r\n    // ... actions\r\n    check(actions,                'actions must be an Action[] array'); // defaulted to [] ... this is user error of like null or something\r\n    check(Array.isArray(actions), 'actions must be an Action[] array');\r\n    actions.forEach( (action, indx) => {\r\n      check(action.txt,           `action[${indx}].txt is required`);\r\n      check(isString(action.txt), `action[${indx}].txt be a string ... NOT: ${action.txt}`);\r\n      if (action.action) {\r\n        check(isFunction(action.action), `action[${indx}].action (when supplied) must be a function ... NOT: ${action.action}`);\r\n      }\r\n    });\r\n\r\n    // ... unknown args\r\n    const unknownArgKeys = Object.keys(unknownArgs);\r\n    check(unknownArgKeys.length===0,  `unrecognized named parameter(s): ${unknownArgKeys}`);\r\n\r\n    // maintain our display duration\r\n    const autoHideDuration = duration ? duration*1000 : null; // convert to seconds ... null indicates manual close (via actions [default to OK])\r\n\r\n    // interpret any client-supplied actions\r\n\r\n    // ... provide a default OK when NO duration and NO actions are defined\r\n    //     NOTE: When NO duration is supplied, only way to close notification is through an action!\r\n    //           If client has NO actions, we will supply one (a default OK)\r\n    if (!duration && actions.length===0) {\r\n      actions = [{txt: 'OK'}]; // do NOT mutate client-supplied actions\r\n    }\r\n\r\n    // ... maintain a actions callback map indexed by .txt (default to identityFn)\r\n    const actionsCbMap = actions.reduce( (map, action) => {\r\n      map[action.txt] = action.action || identityFn;\r\n      return map;\r\n    }, {} );\r\n    // ... define our actionButtons (supplied to enqueueSnackbar) ... empty array is ignored\r\n    const actionButtons = actions.map( (action, indx) => <Button key={indx} color=\"default\" size=\"small\">{action.txt}</Button> );\r\n\r\n\r\n    // KEY: display the notification ... using notistack's enqueueSnackbar(...)\r\n    const snackbarKey = this.props.enqueueSnackbar(msg, {\r\n      variant: levelVariant[level],\r\n      autoHideDuration,\r\n      anchorOrigin: anchorOrigin[position],\r\n      action: actionButtons,\r\n      onClickAction: (e) => {\r\n        // close this notification\r\n        this.props.closeSnackbar(snackbarKey);\r\n\r\n        // invoke client-supplied callback\r\n        // ... on delay to make any client-notification transitions more intuitive\r\n        const clientAction = actionsCbMap[e.target.textContent];\r\n        setTimeout( () => clientAction(), 400);\r\n      },\r\n    });\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        {this.props.children}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\n// our level variant (indirectly defines color -and- provides level validation)\r\nconst levelVariant = { // color NOT used\r\n  success: 'success',\r\n  info:    'info',\r\n  warn:    'warning',\r\n  error:   'error',\r\n};\r\n\r\n// our anchorOrigin, indexed by position keyword\r\nconst anchorOrigin = {\r\n  'top-left':      { vertical: 'top',    horizontal: 'left'   },\r\n  'top-center':    { vertical: 'top',    horizontal: 'center' },\r\n  'top-right':     { vertical: 'top',    horizontal: 'right'  },\r\n  'bottom-left':   { vertical: 'bottom', horizontal: 'left'   },\r\n  'bottom-center': { vertical: 'bottom', horizontal: 'center' },\r\n  'bottom-right':  { vertical: 'bottom', horizontal: 'right'  },\r\n};\r\n\r\n// a convenient identity function\r\nconst identityFn = (p)=>p;\r\n\r\n\r\n//***\r\n//*** the withSnackbar() HOC provides access to the Snackbar run-time methods:\r\n//***   + props.enqueueSnackbar(...)\r\n//***   + props.closeSnackbar(...)\r\n//*** \r\n\r\nconst NotifyAPI_withSnackBar = withSnackbar(NotifyAPI);\r\nNotifyAPI_withSnackBar.displayName = 'NotifyAPI_withSnackBar'; // ... for react debugging (NOT accomplished in withSnackbar() ... grrrrr)\r\n\r\n\r\n\r\n/**\r\n * Display a user notification - the general purpose access point,\r\n * using named directives.\r\n *\r\n * @param {string} directive.msg the message to be displayed (cr/lf\r\n * are supported).\r\n *\r\n * @param {number} [directive.duration] the number of seconds to\r\n * display the msg before automatically closing the dialog.  If not\r\n * supplied, the dialog must be explicitly closed through a button\r\n * click.\r\n *\r\n * @param {string} [directive.level] the category level associated\r\n * with this notification (impacting background color).  One of:\r\n *  - 'success' ... the default\r\n *  - 'info'\r\n *  - 'warn'\r\n *  - 'error'\r\n *\r\n * @param {string} [directive.position] the position to display this\r\n * notification. One of:\r\n *  - 'top-left'\r\n *  - 'top-center'\r\n *  - 'top-right'\r\n *  - 'bottom-left' ... the default\r\n *  - 'bottom-center'\r\n *  - 'bottom-right'\r\n *\r\n * @param {boolean} [directive.modal] an indicator as to whether the\r\n * notification dialog is modal (true) or not (false) the default.\r\n *\r\n * @param {Action[]} [directive.actions] one or more actions -\r\n * button/action combinations.  The required Action.txt defines the\r\n * button label, and the Action.action is an option client-supplied\r\n * callback.  Each defined action will implicitly close the dialog,\r\n * in addition to invoking the optional client-supplied callback.\r\n *\r\n * NOTE: When NO duration and NO actions are defined, a default OK \r\n *       action is injected that will close the dialog when clicked.\r\n *\r\n * Example:\r\n * ```\r\n *   notify({\r\n *     msg:      'You have un-saved changes.\\nif you leave, your changes will NOT be saved!',\r\n *     duration: seconds,\r\n *     level:    'warn',\r\n *     position: 'bottom-right',\r\n *     modal:    true,\r\n *     actions: [\r\n *       { txt: 'Discard Changes', action: () => ...callback-logic-here... },\r\n *       { txt: 'Go Back' }\r\n *     ]\r\n *   });\r\n * ```\r\n */\r\nexport function notify(directive) {\r\n  // validate that an <Notify> has been instantiated\r\n  verify(_singleton, 'notify(): NO <Notify> instance has been established in the app root.');\r\n\r\n  // pass-through to our instance method\r\n  _singleton.display(directive);\r\n}\r\n\r\n\r\n/**\r\n * The toast() function is a convenience wrapper around notify() that\r\n * displays the supplied msg as a \"toast\" ... a non-modal dialog\r\n * located at the bottom-left of the screen, which is typically closed\r\n * after 5 seconds.\r\n *\r\n * Various levels can be accomplished via toast.success(),\r\n * toast.info(), toast.warn(), toast.error() ... all of which have the\r\n * same signature.  NOTE: toast() is the same as toast.success().\r\n *\r\n * @param {string} directive.msg the message to be displayed (cr/lf are\r\n * supported).\r\n *\r\n * @param {number} [directive.duration] the number of seconds before\r\n * automatically closing the dialog (default: 5).  A null defers to\r\n * supplied actions to close (which in turn defaults to an OK).\r\n *\r\n * @param {Action[]} [directive.actions] one or more actions -\r\n * button/action combinations.  The required Action.txt defines the\r\n * button label, and the Action.action is an option client-supplied\r\n * callback.  Each defined action will implicitly close the dialog,\r\n * in addition to invoking the optional client-supplied callback.\r\n *\r\n * NOTE: When NO duration and NO actions are defined, a default OK \r\n *       action is injected that will close the dialog when clicked.\r\n *\r\n * Example:\r\n * ```\r\n *\r\n *   toast({ msg:'Hello World' });    // will close in 6 secs\r\n *\r\n *   toast.error({ msg:     `An error occurred: ${err}`, \r\n *                 duration: null }); // OK button will close\r\n *\r\n *   toast.warn({                     // will close in 3 secs -OR- when \"undo\" is clicked\r\n *     msg: 'Your item was deleted', \r\n *     actions: [\r\n *       { txt: 'undo', action: () => ...callback-logic-here... },\r\n *     ]\r\n *    })\r\n * ```\r\n */\r\nfunction toastBase({msg, duration=5, actions, ...unknownArgs}, level) {\r\n\r\n  // validate toast-specific characteristics (other validation done by notify())\r\n  const funcQual = level ? `.${level}` : '';\r\n  const check    = verify.prefix(`toast${funcQual}() parameter violation: `);\r\n\r\n  // NOTE: as a general rule, validations are provided by the root notify()\r\n  // checking msg explicitly avoids unknownArgKeys weirdness (below) when msg is passed as a non-named param\r\n  check(msg, 'msg named parameter is required');\r\n\r\n  const unknownArgKeys = Object.keys(unknownArgs);\r\n  check(unknownArgKeys.length===0,  `unrecognized named parameter(s): ${unknownArgKeys}`);\r\n\r\n  // defer to our general-purpose notify() utility\r\n  notify({\r\n    msg,\r\n    duration,\r\n    level,    // NOTE: level is defaulted by the root notify()\r\n    position: 'bottom-left',\r\n    modal: false,\r\n    actions,\r\n  });\r\n}\r\nexport function  toast(directive) { toastBase(directive);          }\r\ntoast.success  = function(directive) { toastBase(directive, 'success'); }\r\ntoast.info     = function(directive) { toastBase(directive, 'info');    }\r\ntoast.warn     = function(directive) { toastBase(directive, 'warn');    }\r\ntoast.error    = function(directive) { toastBase(directive, 'error');   }\r\n\r\n\r\n/**\r\n * The alert() function is a convenience wrapper around notify() that\r\n * displays the supplied msg as a \"alert\" ... a modal dialog located\r\n * at the top-center of the screen, that must be acknowledged by the\r\n * user with either the default OK button, or a client-supplied\r\n * action.\r\n *\r\n * Various levels can be accomplished via alert.success(),\r\n * alert.info(), alert.warn(), alert.error() ... all of which have the\r\n * same signature.  NOTE: alert() is the same as alert.success().\r\n *\r\n * @param {string} directive.msg the message to be displayed (cr/lf\r\n * are supported).\r\n *\r\n * @param {Action[]} [directive.actions] one or more actions -\r\n * button/action combinations.  The required Action.txt defines the\r\n * button label, and the Action.action is an option client-supplied\r\n * callback.  Each defined action will implicitly close the dialog,\r\n * in addition to invoking the optional client-supplied callback.\r\n *\r\n * NOTE: When NO actions are defined, a default OK  action is injected\r\n *       that will close the dialog when clicked.\r\n *\r\n * Example:\r\n * ```\r\n *   alert({ msg:'Hello World' });\r\n *   alert.warn({\r\n *     msg:`Your limit (${limit}) has been reached!`\r\n *     actions: [\r\n *       { txt: 'increase', action: () => ...callback-logic-here... },\r\n *     ]\r\n *   });\r\n * ```\r\n */\r\nfunction alertBase({msg, actions, ...unknownArgs}, level) {\r\n\r\n  // validate alert-specific characteristics (other validation done by notify())\r\n  const funcQual = level ? `.${level}` : '';\r\n  const check    = verify.prefix(`alert${funcQual}() parameter violation: `);\r\n\r\n  // NOTE: as a general rule, validations are provided by the root notify()\r\n  // checking msg explicitly avoids unknownArgKeys weirdness (below) when msg is passed as a non-named param\r\n  check(msg, 'msg named parameter is required');\r\n\r\n  const unknownArgKeys = Object.keys(unknownArgs);\r\n  check(unknownArgKeys.length===0,  `unrecognized named parameter(s): ${unknownArgKeys}`);\r\n\r\n  // defer to our general-purpose notify() utility\r\n  notify({\r\n    msg,\r\n    duration: null, // force user acknowledgment\r\n    level,          // NOTE: level is defaulted by the root notify()\r\n    position: 'top-center',\r\n    modal: true,\r\n    actions,\r\n  });\r\n}\r\nexport function  alert(directive) { alertBase(directive);          }\r\nalert.success  = function(directive) { alertBase(directive, 'success'); }\r\nalert.info     = function(directive) { alertBase(directive, 'info');    }\r\nalert.warn     = function(directive) { alertBase(directive, 'warn');    }\r\nalert.error    = function(directive) { alertBase(directive, 'error');   }\r\n\r\n\r\n/**\r\n * The confirm() function is a convenience wrapper around notify()\r\n * that displays the supplied msg as a \"confirmation\" ... a modal\r\n * dialog located at the bottom-right of the screen, that must be\r\n * acknowledged through client-supplied action buttons.\r\n *\r\n * Various levels can be accomplished via confirm.success(),\r\n * confirm.info(), confirm.warn(), confirm.error() ... all of which\r\n * have the same signature.  NOTE: confirm() is the same as\r\n * confirm.success().\r\n *\r\n * @param {string} directive.msg the message to be displayed (cr/lf\r\n * are supported).\r\n *\r\n * @param {Action[]} directive.actions one or more actions - button/action\r\n * combinations.  The required Action.txt defines the button label,\r\n * and the Action.action is an option client-supplied callback.  Each\r\n * defined action will implicitly close the dialog, in addition to\r\n * invoking the optional client-supplied callback.\r\n *\r\n * Example:\r\n * ```\r\n *   confirm.warn({ \r\n *     msg: 'This is an confirm warning.\\nYou must explicitly acknowledge it.', \r\n *     actions: [\r\n *       { txt: 'Discard Changes', action: () => console.log('xx Discarding Changes') },\r\n *       { txt: 'Go Back' }\r\n *     ]\r\n *   });\r\n * ```\r\n */\r\nfunction confirmBase({msg, actions, ...unknownArgs}, level) {\r\n\r\n  // validate confirm-specific characteristics (other validation done by notify())\r\n  const funcQual = level ? `.${level}` : '';\r\n  const check    = verify.prefix(`confirm${funcQual}() parameter violation: `);\r\n\r\n  // NOTE: as a general rule, validations are provided by the root notify()\r\n  // checking msg explicitly avoids unknownArgKeys weirdness (below) when msg is passed as a non-named param\r\n  check(msg, 'msg named parameter is required');\r\n\r\n  // confirm() requires client-supplied actions\r\n  check(actions && actions.length>0, 'client-specific actions are required.');\r\n\r\n  const unknownArgKeys = Object.keys(unknownArgs);\r\n  check(unknownArgKeys.length===0,  `unrecognized named parameter(s): ${unknownArgKeys}`);\r\n\r\n  // defer to our general-purpose notify() utility\r\n  notify({\r\n    msg,\r\n    duration: null, // force user acknowledgment\r\n    level,          // NOTE: level is defaulted by the root notify()\r\n    position: 'top-right',\r\n    modal: true,\r\n    actions,\r\n  });\r\n}\r\nexport function  confirm(directive) { confirmBase(directive);          }\r\nconfirm.success  = function(directive) { confirmBase(directive, 'success'); }\r\nconfirm.info     = function(directive) { confirmBase(directive, 'info');    }\r\nconfirm.warn     = function(directive) { confirmBase(directive, 'warn');    }\r\nconfirm.error    = function(directive) { confirmBase(directive, 'error');   }\r\n","import React              from 'react';\r\nimport PropTypes          from 'prop-types';\r\nimport withStyles         from '@material-ui/core/styles/withStyles';\r\nimport {MuiThemeProvider,      // NOTE: MuiThemeProvider **SHOULD** be at the root of ALL visible components\r\n        createMuiTheme}   from '@material-ui/core/styles';\r\nimport CssBaseline        from '@material-ui/core/CssBaseline';\r\nimport Notify             from '../notify';\r\n\r\n\r\n/**\r\n * MainLayout is a re-usable top-level component that promotes the\r\n * proper Material-UI (MUI) theming/styling WITH a reactive layout.\r\n *\r\n * Typically, this is used implicitly through AppLayout, however some\r\n * components that are NOT part of AppLayout (like SignIn) will use\r\n * MainLayout explicitly.\r\n * \r\n * USAGE:\r\n * ```\r\n *   <MainLayout>\r\n *     ... content here\r\n *   </MainLayout>\r\n * ```\r\n * \r\n * NOTE: This implementation was initially gleaned from the MUI\r\n *       Sign-in page layout example.\r\n *        - Visual: https://material-ui.com/getting-started/page-layout-examples/sign-in/\r\n *        - Source: https://github.com/mui-org/material-ui/blob/master/docs/src/pages/getting-started/page-layout-examples/sign-in/MainLayout.js\r\n */\r\n\r\nconst lightTheme = createMuiTheme({\r\n  typography: {\r\n    useNextVariants: true,\r\n  },\r\n  palette: {\r\n    type: 'light',\r\n    // AI: More theming to consider\r\n    // primary: {\r\n    //   main: '#37b44e',\r\n    // },\r\n    // secondary: {\r\n    //   main: '#000',\r\n    // },\r\n  },\r\n});\r\n\r\nconst darkTheme = createMuiTheme({\r\n  typography: {\r\n    useNextVariants: true,\r\n  },\r\n  palette: {\r\n    type: 'dark',\r\n  },\r\n});\r\n\r\nconst mainStyles = (theme) => ({\r\n  main: {\r\n    width:        'auto',\r\n    display:      'block', // Fix IE 11 issue.\r\n    //marginLeft:   theme.spacing.unit * 3, // KJB: bad news for my AppLayout content container\r\n    //marginRight:  theme.spacing.unit * 3,\r\n\r\n    // reactive design ?? KJB: better understand // KJB: ?? THIS IS CAUSING HAVOC on my main content container overall width\r\n    //? [theme.breakpoints.up(400 + theme.spacing.unit * 3 * 2)]: {\r\n    //?   width:       400,\r\n    //?   marginLeft:  'auto',\r\n    //?   marginRight: 'auto',\r\n    //? },\r\n  },\r\n});\r\n\r\nfunction MainLayout({isThemeLight, children, classes}) {\r\n  const themeInUse = isThemeLight ? lightTheme : darkTheme;\r\n  // console.log('***eatery-nod-w*** <MainLayout> MUI theme in use:', themeInUse)\r\n  return (\r\n    <MuiThemeProvider theme={themeInUse}>\r\n      <CssBaseline/>\r\n      <Notify/>\r\n      <main className={classes.main}>\r\n        {children}\r\n      </main>\r\n    </MuiThemeProvider>\r\n  );\r\n}\r\n\r\nMainLayout.propTypes = {\r\n  isThemeLight: PropTypes.bool.isRequired,\r\n  children:     PropTypes.node.isRequired,\r\n  classes:      PropTypes.object.isRequired,\r\n};\r\n\r\nMainLayout.defaultProps = {\r\n  isThemeLight: false, // AI: to make isThemeLight dynamically switchable at run-time, simply inject this from maintained redux state\r\n};\r\n\r\nexport default withStyles(mainStyles)(MainLayout);\r\n","import React              from 'react';\r\nimport PropTypes          from 'prop-types';\r\nimport withStyles         from '@material-ui/core/styles/withStyles';\r\nimport MainLayout         from './MainLayout';\r\n\r\nimport Drawer             from  '@material-ui/core/Drawer';\r\nimport AppBar             from  '@material-ui/core/AppBar';\r\nimport Toolbar            from  '@material-ui/core/Toolbar';\r\nimport List               from  '@material-ui/core/List';\r\nimport Typography         from  '@material-ui/core/Typography';\r\nimport Divider            from  '@material-ui/core/Divider';\r\nimport IconButton         from  '@material-ui/core/IconButton';\r\nimport Badge              from  '@material-ui/core/Badge';\r\nimport MenuIcon           from  '@material-ui/icons/Menu';\r\nimport NotificationsIcon  from  '@material-ui/icons/Notifications';\r\n\r\nimport AccountCircle      from '@material-ui/icons/AccountCircle';\r\nimport Menu               from '@material-ui/core/Menu';\r\nimport MenuItem           from '@material-ui/core/MenuItem';\r\n\r\nimport ListItem           from '@material-ui/core/ListItem';\r\nimport ListItemIcon       from '@material-ui/core/ListItemIcon';\r\nimport ListItemText       from '@material-ui/core/ListItemText';\r\nimport ListItemSecondaryAction  from '@material-ui/core/ListItemSecondaryAction';\r\nimport InboxIcon          from '@material-ui/icons/MoveToInbox';\r\nimport MailIcon           from '@material-ui/icons/Mail';\r\n\r\nimport {toast,\r\n        confirm}          from '../notify';\r\n\r\n\r\n/**\r\n * AppLayout is a re-usable top-level layout component that\r\n * establishes the application characteristics like Tool Bar, Left\r\n * Nav, etc.\r\n * \r\n * The main page content is rendered as children of this component\r\n * (like eateries and discovery).\r\n *\r\n * USAGE:\r\n * ```\r\n *   <AppLayout title=\"Pool\">\r\n *     ... page content here\r\n *   </AppLayout>\r\n * ```\r\n * \r\n * NOTE: This implementation was initially gleaned from the MUI\r\n *       Dashboard page layout example. ? my version is SOO pruned down, not sure I want to even reference this\r\n *        - Visual: https://material-ui.com/getting-started/page-layout-examples/dashboard/\r\n *        - Source: https://github.com/mui-org/material-ui/tree/master/docs/src/pages/getting-started/page-layout-examples/dashboard\r\n */\r\n\r\nconst appStyles = (theme) => ({\r\n\r\n  app: {\r\n    display: 'flex', // KJB: does not seem to be doing anything\r\n  },\r\n\r\n  appBar: {\r\n    //? ***Dashboard Sample***\r\n    //? zIndex:     theme.zIndex.drawer + 1,\r\n    //? transition: theme.transitions.create(['width', 'margin'], {\r\n    //?   easing:   theme.transitions.easing.sharp,\r\n    //?   duration: theme.transitions.duration.leavingScreen,\r\n    //? }),\r\n  },\r\n\r\n  bottomBar: {\r\n    top:        'auto',\r\n    bottom:     0,\r\n    alignItems: 'center',\r\n  },\r\n\r\n  toolbar: {\r\n    //? ***Dashboard Sample***\r\n    //? paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n\r\n  menuButton: {\r\n    //? marginLeft:  12, //? ...more ***Dashboard Sample***\r\n    marginRight: 36, // proper spacing between menu button and title\r\n  },\r\n\r\n  title: {\r\n    flexGrow: 1, // moves right-most toolbar items to the right\r\n  },\r\n\r\n  leftNav: {\r\n    width: 250, // make width significant enough to space out our secondary menu icons\r\n  },\r\n\r\n  content: {\r\n    flexGrow: 1,\r\n    height: '100vh',                 // content window is height is same as our viewport (100%)\r\n    overflow: 'auto',                // add scrollbar ONLY when necessary\r\n\r\n    paddingTop:    '4em', // HACK: so ToolBar doesn't cover up ... must be a better way\r\n    paddingBottom: '4em', // HACK: so BottomBar doesn't cover up ... must be a better way\r\n    // padding: theme.spacing.unit * 3, // ... from sample content ... sample: 8 * 3\r\n\r\n    // KJB: temporarily make content window VERY VISIBLE\r\n    // backgroundColor: 'pink',\r\n  },\r\n\r\n});\r\n\r\n\r\nfunction AppLayout({title, children, classes, bottomBarContent}) {\r\n\r\n  //*** Authorization *** ----------------------------------------------------------\r\n  const isAuthorized = true; // pretend user is authorized\r\n\r\n\r\n  //*** User Menu *** --------------------------------------------------------------\r\n  const [anchorUserMenu, setAnchorUserMenu] = React.useState(null); // KJB: WowZee MY FIRST hook!\r\n  const userMenuOpen = Boolean(anchorUserMenu);\r\n\r\n  function handleUserMenuOpen(event) {\r\n    setAnchorUserMenu(event.currentTarget);\r\n  }\r\n\r\n  function handleUserMenuClose() {\r\n    setAnchorUserMenu(null);\r\n  }\r\n\r\n  function handleSignOut() {\r\n    handleUserMenuClose();\r\n    confirm.warn({ \r\n      msg: 'Are you sure you wish to sign out?', \r\n      actions: [\r\n        { txt: 'Sign Out', action: () => toast.success({msg: 'Now pretending you are signed out!'}) },\r\n        { txt: 'Go Back' }\r\n      ]\r\n    });\r\n  }\r\n\r\n  //*** Left Nav *** ---------------------------------------------------------------\r\n  const [leftNavVisible, setLeftNavVisible] = React.useState(false);\r\n  const openLeftNav     = () => setLeftNavVisible(true);\r\n  const closeLeftNav    = () => setLeftNavVisible(false);\r\n//const toggleLeftNav   = () => setLeftNavVisible(!leftNavVisible);\r\n  const handleLeftNavOp = (txt) => toast.success({msg: `doing ${txt}`});\r\n\r\n  const myListItem = (txt, indx) => ( // convenience list item builder (for demo purposes only)\r\n    <ListItem button\r\n              key={`${txt}_${indx}`}\r\n              onClick={()=>handleLeftNavOp(txt)}>\r\n      <ListItemIcon>{indx%2 ? <InboxIcon/> : <MailIcon/>}</ListItemIcon>\r\n      <ListItemText primary={txt}/>\r\n      <ListItemSecondaryAction onClick={()=>handleLeftNavOp(`SECONDARY: ${txt}`)}>\r\n        <ListItemIcon>{indx%2 ? <MailIcon/> : <InboxIcon/>}</ListItemIcon>\r\n      </ListItemSecondaryAction>\r\n    </ListItem>\r\n  );\r\n\r\n  // TEMPORARY: pretend we have bottomBarContent\r\n  bottomBarContent = (\r\n    <Typography color=\"inherit\">\r\n      My Bottom Bar\r\n    </Typography>\r\n  );\r\n\r\n  //*** Render our AppLayout *** ---------------------------------------------------\r\n  return (\r\n    <MainLayout>\r\n      <div className={classes.app}>\r\n\r\n        {/* Title Bar */}\r\n        <AppBar className={classes.appBar}\r\n                position=\"absolute\">\r\n          <Toolbar className={classes.toolbar}\r\n                   disableGutters={false}>\r\n\r\n            <IconButton className={classes.menuButton}\r\n                        color=\"inherit\"\r\n                        onClick={openLeftNav}>\r\n              <MenuIcon/>\r\n            </IconButton>\r\n\r\n            <Typography component=\"h1\"\r\n                        variant=\"h6\"\r\n                        color=\"inherit\"\r\n                        noWrap\r\n                        className={classes.title}>\r\n              {title}\r\n            </Typography>\r\n\r\n            <IconButton color=\"inherit\"> {/* KJB: Badge sample  */}\r\n              <Badge badgeContent={4} color=\"secondary\">\r\n                <NotificationsIcon/>\r\n              </Badge>\r\n            </IconButton>\r\n\r\n            {isAuthorized && /* User Profile Menu - only show authorized ... not really applicable in our case but keep for pattern */ (\r\n               <div>\r\n                 <IconButton color=\"inherit\"\r\n                             onClick={handleUserMenuOpen}>\r\n                   <AccountCircle/>\r\n                 </IconButton>\r\n                 <Menu anchorEl={anchorUserMenu}\r\n                       anchorOrigin={{\r\n                         vertical: 'top',\r\n                         horizontal: 'right',\r\n                       }}\r\n                       transformOrigin={{\r\n                         vertical: 'top',\r\n                         horizontal: 'right',\r\n                       }}\r\n                       open={userMenuOpen}\r\n                       onClose={handleUserMenuClose}>\r\n                   <MenuItem onClick={handleUserMenuClose}>Profile</MenuItem>\r\n                   <MenuItem onClick={handleUserMenuClose}>My account</MenuItem>\r\n                   <MenuItem onClick={handleSignOut}>Sign Out</MenuItem>\r\n                 </Menu>\r\n               </div>\r\n             )}\r\n\r\n          </Toolbar>\r\n        </AppBar>\r\n\r\n        {/* Left Nav */}\r\n        {/* AI: have seen some usage of tabIndex in <div> under <Drawer> (unsure if needed)\r\n                tabIndex={0} ... should be focus-able in sequential keyboard navigation, but its order is defined by the document's source order\r\n          */}\r\n        <Drawer open={leftNavVisible}\r\n                onClose={closeLeftNav}>\r\n          <div className={classes.leftNav}\r\n               onClick={closeLeftNav}\r\n               onKeyDown={closeLeftNav}>\r\n            <AppBar position=\"static\">\r\n              <Toolbar>\r\n                <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\r\n                  Select a view\r\n                </Typography>\r\n              </Toolbar>\r\n            </AppBar>\r\n            <List>\r\n              {['WowZee', 'WowZee James', 'WooWoo'].map((txt, indx) => myListItem(txt, indx))}\r\n            </List>\r\n            <Divider/>\r\n            <List>\r\n              {['WomBee', 'WomBee Very Long Item', 'WooLoo'].map((txt, indx) => myListItem(txt, indx))}\r\n            </List>\r\n          </div>\r\n        </Drawer>\r\n\r\n        {/* Page Content */}\r\n        {/* $$AI: multiple <main> appears to be allowed (although NOT technically correct) ... in this app does NOT seem to matter if THIS is <main> or <div> */}\r\n        <main className={classes.content}>\r\n          {children}\r\n        </main>\r\n\r\n        {/* Optional Bottom Bar TODO: ?? look into <BottomNavigation>  */}\r\n        {bottomBarContent && (\r\n           <AppBar className={classes.bottomBar}\r\n                   position=\"absolute\">\r\n             <Toolbar className={classes.toolbar}\r\n                      disableGutters={false}>\r\n               {bottomBarContent}\r\n             </Toolbar>\r\n           </AppBar>\r\n         )}\r\n\r\n      </div>\r\n    </MainLayout>\r\n  );\r\n}\r\n\r\nAppLayout.propTypes = {\r\n  title:            PropTypes.string.isRequired, // page title\r\n  children:         PropTypes.node.isRequired,   // main page content (like eateries and discovery)\r\n  classes:          PropTypes.object.isRequired,\r\n  bottomBarContent: PropTypes.node,              // optional bottom bar content\r\n};\r\n\r\nAppLayout.defaultProps = {\r\n  title: 'Eatery Nod',\r\n};\r\n\r\nexport default withStyles(appStyles)(AppLayout);\r\n","import React            from 'react';\r\nimport PropTypes        from 'prop-types';\r\nimport { withStyles }   from '@material-ui/core/styles';\r\nimport withMobileDialog from '@material-ui/core/withMobileDialog';\r\nimport Progress         from '@material-ui/core/LinearProgress';  // -or- '@material-ui/core/CircularProgress';\r\nimport Dialog           from '@material-ui/core/Dialog';\r\nimport DialogContent    from '@material-ui/core/DialogContent';\r\nimport DialogTitle      from '@material-ui/core/DialogTitle';\r\nimport Slide            from '@material-ui/core/Slide';\r\nimport Typography       from '@material-ui/core/Typography';\r\n\r\nfunction Transition(props) {\r\n  return <Slide direction=\"left\" timeout=\"1000\" {...props} />;\r\n}\r\n\r\nconst styles = theme => ({\r\n  title: {\r\n    color:           theme.palette.common.white,\r\n    backgroundColor: theme.palette.primary.main, // theme.palette.primary.main (bluish) or theme.palette.secondary.main (redish)\r\n  },\r\n\r\n  favicon: {\r\n    width: '150px', // size the eatery-nod icon\r\n  },\r\n\r\n  progress: {\r\n    margin: theme.spacing.unit * 4,\r\n  },\r\n});\r\n\r\n\r\n/**\r\n * A modal SplashScreen used when there is nothing else to display :-)\r\n *\r\n * The SplashScreen will responsively/dynamically utilize the full\r\n * screen for cell phone devices.\r\n *\r\n * NOTE: Currently we dynamically size based on the message content,\r\n *       within the constraint of the screen.  Not sure if I like\r\n *       this or not ... it is good for cell phones, but can be rather\r\n *       small for browsers (typically the message is pretty small).\r\n *       FYI: This is pretty much the default behavior of <Dialog>.\r\n *            I spend a small amount of time to override this without\r\n *            any success.\r\n */\r\nfunction SplashScreen({msg, classes, fullScreen}) {\r\n\r\n  return (\r\n    <Dialog open={true}\r\n            fullScreen={fullScreen}\r\n            TransitionComponent={Transition}>\r\n\r\n      <DialogTitle className={classes.title}>\r\n        <center className={classes.title}>Eatery Nod</center>\r\n      </DialogTitle>\r\n\r\n      <DialogContent>\r\n        <center>\r\n         <br/>\r\n          <img className={classes.favicon} src='/eatery.png' alt='eatery-nod'/>\r\n          <br/>\r\n          <Progress className={classes.progress} color=\"secondary\"/>\r\n          <Typography variant=\"body2\">{msg}</Typography>\r\n          <br/>\r\n        </center>\r\n      </DialogContent>\r\n\r\n    </Dialog>\r\n  );\r\n\r\n}\r\n\r\nSplashScreen.propTypes = {\r\n  msg:        PropTypes.string,\r\n  classes:    PropTypes.object.isRequired,\r\n  fullScreen: PropTypes.bool.isRequired,\r\n};\r\n\r\nSplashScreen.defaultProps = {\r\n  msg: '',\r\n};\r\n\r\nconst SplashScreen_withStyles = withStyles(styles)(SplashScreen);\r\n\r\n// inject responsive `fullScreen` true/false prop based on screen size\r\n// ... breakpoint screen size: xs, sm (DEFAULT), md, lg, xl\r\nexport default withMobileDialog({breakpoint: 'sm'})(SplashScreen_withStyles);\r\n","import React         from 'react';\r\n\r\nimport withStyles    from '@material-ui/core/styles/withStyles';\r\n\r\nimport AppLayout     from './util/layout/AppLayout';\r\nimport SplashScreen  from './util/SplashScreen';\r\n\r\nimport Typography    from '@material-ui/core/Typography';\r\n\r\nimport ListItemIcon  from '@material-ui/core/ListItemIcon';\r\nimport EateryIcon    from '@material-ui/icons/Restaurant';\r\n\r\nimport List          from '@material-ui/core/List';\r\nimport ListItem      from '@material-ui/core/ListItem';\r\nimport ListItemText  from '@material-ui/core/ListItemText';\r\n\r\nimport {toast}       from './util/notify';\r\n\r\nconst listStyles = (theme) => ({\r\n  list: {\r\n  },\r\n});\r\n\r\nconst showEateryDetail = () => toast.warn({msg: 'showing selected eatery'});\r\n\r\nconst myListItems = (num) => { // convenience list item builder (for demo purposes only)\r\n  const myList = [];\r\n  for (let i=0; i<num; i++) { \r\n    myList.push((\r\n      <ListItem key={`list-item-${i+1}`}\r\n                dense\r\n                button\r\n                divider\r\n                onClick={showEateryDetail}>\r\n        <ListItemIcon>\r\n          <EateryIcon/>\r\n        </ListItemIcon>\r\n        <ListItemText \r\n            primary={\r\n              <Typography component=\"span\"\r\n                        variant=\"h6\"\r\n                        noWrap>\r\n                        {`Eatery ${i+1}`}\r\n              </Typography>\r\n                    }\r\n            secondary={\r\n              <Typography component=\"span\"\r\n                        variant=\"subtitle1\"\r\n                        noWrap>\r\n                        {`Address ${i+1}-a`}\r\n              </Typography>\r\n                      }/>\r\n      </ListItem>\r\n    ));\r\n  }\r\n  return myList;\r\n};\r\n\r\nfunction TempList({classes}) {\r\n\r\n  const [splashVisible, setSplashVisible] = React.useState(false); // KJB: WowZee ANOTHER HOOK!\r\n\r\n  function showSplashScreen() {\r\n    setSplashVisible(true);\r\n  }\r\n\r\n  return (\r\n    <AppLayout title=\"Pool List Test\">\r\n      <List className={classes.list}>\r\n\r\n        <ListItem key=\"show-SplashScreen\"\r\n                  dense\r\n                  button\r\n                  divider\r\n                  onClick={showSplashScreen}>\r\n          <ListItemText primary=\"Show SplashScreen\"/>\r\n        </ListItem>\r\n\r\n        {myListItems(50)}\r\n      </List>\r\n\r\n      {splashVisible &&\r\n       <SplashScreen msg=\"This is a test.  I hope it works! Currently I am NOT configured to turn off this Splash :-(\"/>}\r\n    </AppLayout>\r\n  );\r\n}\r\n\r\nexport default withStyles(listStyles)(TempList);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React              from 'react';\nimport ReactDOM           from 'react-dom';\n//import MainLayout         from './util/layout/MainLayout';\n//import SplashScreen       from './util/SplashScreen';\n//import AppLayout          from './util/layout/AppLayout';\n//import TempJunk           from './TempJunk';\nimport TempList           from './TempList';\nimport * as serviceWorker from './util/serviceWorker';\n\nfunction App() {\n  // TEMP: various sandboxes (one or the other)\n  return <TempList/>;\n  //? return (\n  //?   <AppLayout title=\"Pool\">\n  //?     <TempJunk/>\n  //?   </AppLayout>\n  //? );\n  //? return (\n  //?   <MainLayout>\n  //?     <SplashScreen msg=\"This is a test outside of AppLayout\"/>\n  //?   </MainLayout>\n  //? );\n}\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}