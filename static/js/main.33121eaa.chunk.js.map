{"version":3,"sources":["util/SplashScreen.js","util/serviceWorker.js","index.js"],"names":["SplashScreen","_ref","msg","classes","react_default","a","createElement","className","main","CssBaseline_default","Paper_default","paper","AppBar_default","position","Toolbar_default","Typography_default","variant","color","grow","favicon","src","alt","CircularProgress_default","progress","defaultProps","withStyles","theme","Object","defineProperty","width","display","marginLeft","spacing","unit","marginRight","breakpoints","up","marginTop","flexDirection","alignItems","padding","concat","flexGrow","margin","Boolean","window","location","hostname","match","ReactDOM","render","util_SplashScreen","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4PAuDA,SAASA,EAATC,GAAsC,IAAfC,EAAeD,EAAfC,IAAKC,EAAUF,EAAVE,QAE1B,OACEC,EAAAC,EAAAC,cAAA,QAAMC,UAAWJ,EAAQK,MAAzB,IAGEJ,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,MAEAD,EAAAC,EAAAC,cAACI,EAAAL,EAAD,CAAOE,UAAWJ,EAAQQ,OAExBP,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CAAQQ,SAAS,UACfT,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,KACED,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CAAYW,QAAQ,KAAKC,MAAM,UAAUV,UAAWJ,EAAQe,MAA5D,gBAMJd,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,WAEVF,EAAAC,EAAAC,cAAA,OAAKC,UAAWJ,EAAQgB,QAASC,IAAI,cAAcC,IAAI,eAGvDjB,EAAAC,EAAAC,cAACgB,EAAAjB,EAAD,CAAkBE,UAAWJ,EAAQoB,WAErCnB,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CAAYW,QAAQ,SACjBd,KA8CXF,EAAawB,aAAe,CAC1BtB,IAAK,IAGQuB,2BAvHA,SAAAC,GAAK,MAAK,CAEvBlB,KAAKmB,OAAAC,EAAA,EAAAD,CAAA,CACHE,MAAa,OACbC,QAAa,QACbC,WAAkC,EAArBL,EAAMM,QAAQC,KAC3BC,YAAkC,EAArBR,EAAMM,QAAQC,MAI1BP,EAAMS,YAAYC,GAAG,IAA2B,EAArBV,EAAMM,QAAQC,KAAW,GAAK,CACxDJ,MAAa,IACbE,WAAa,OACbG,YAAa,SAIjBvB,MAAO,CACL0B,UAAoC,EAArBX,EAAMM,QAAQC,KAC7BH,QAAe,OACfQ,cAAe,SACfC,WAAe,SACfC,QAAO,GAAAC,OAAgC,EAArBf,EAAMM,QAAQC,KAAzB,OAAAQ,OAA4D,EAArBf,EAAMM,QAAQC,KAArD,OAAAQ,OAAwF,EAArBf,EAAMM,QAAQC,KAAjF,OAGTf,KAAM,CACJwB,SAAU,GAIZvB,QAAS,CACPU,MAAO,OAGTN,SAAU,CACRoB,OAA6B,EAArBjB,EAAMM,QAAQC,QAoFXR,CAAmBzB,GCvHd4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OAAO9C,EAAAC,EAAAC,cALhB,WAEE,OAAOF,EAAAC,EAAAC,cAAC6C,EAAD,CAAcjD,IADL,6FAIF,MAAQkD,SAASC,eAAe,SDuH1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.33121eaa.chunk.js","sourcesContent":["import React         from 'react';\r\n//? import PropTypes     from 'prop-types';\r\nimport { withStyles }   from '@material-ui/core/styles';\r\nimport Typography       from '@material-ui/core/Typography';\r\nimport CssBaseline      from '@material-ui/core/CssBaseline';\r\nimport Paper            from '@material-ui/core/Paper';\r\nimport AppBar           from '@material-ui/core/AppBar';\r\nimport Toolbar          from '@material-ui/core/Toolbar';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\n//? import commonStyles  from '../../features/commonStyles'; ?? what about this\r\n\r\nconst styles = theme => ({\r\n\r\n  main: {\r\n    width:       'auto',\r\n    display:     'block', // Fix IE 11 issue.\r\n    marginLeft:  theme.spacing.unit * 3,\r\n    marginRight: theme.spacing.unit * 3,\r\n\r\n    // ?? play with more breakpoints\r\n    // display size ??UP, limit main width to 400\r\n    [theme.breakpoints.up(400 + theme.spacing.unit * 3 * 2)]: {\r\n      width:       400,\r\n      marginLeft:  'auto',\r\n      marginRight: 'auto',\r\n    },\r\n  },\r\n\r\n  paper: {\r\n    marginTop:     theme.spacing.unit * 8,\r\n    display:       'flex',\r\n    flexDirection: 'column',\r\n    alignItems:    'center',\r\n    padding:       `${theme.spacing.unit * 2}px ${theme.spacing.unit * 3}px ${theme.spacing.unit * 3}px`,\r\n  },\r\n\r\n  grow: {\r\n    flexGrow: 1,\r\n    // alignItems:    'center',\r\n  },\r\n\r\n  favicon: {\r\n    width: '50%', // NOTE: this is 50% of our container (in this case - paper)\r\n  },\r\n\r\n  progress: {\r\n    margin: theme.spacing.unit * 2,\r\n  },\r\n});\r\n\r\n\r\n/**\r\n * SplashScreen used when there is nothing else to display.\r\n */\r\nfunction SplashScreen({msg, classes}) {\r\n  // ?? use Typography in place of <p>\r\n  return (\r\n    <main className={classes.main}> {/* ?? wonder if this should go in root */}\r\n\r\n      {/* <CssBaseline/> ?? unsure how much this is doing ... should go in root if we do use */}\r\n      <CssBaseline/>\r\n\r\n      <Paper className={classes.paper}>\r\n\r\n        <AppBar position=\"static\">\r\n          <Toolbar>\r\n            <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\r\n              eatery-nod\r\n            </Typography>\r\n          </Toolbar>\r\n        </AppBar>\r\n\r\n        <br/><br/><br/>\r\n\r\n        <img className={classes.favicon} src='/eatery.png' alt='eatery-nod'/>\r\n\r\n        {/* ?? color=\"secondary\" */}\r\n        <CircularProgress className={classes.progress}/>\r\n\r\n        <Typography variant=\"body2\">\r\n          {msg}\r\n        </Typography>\r\n\r\n        {/* test bigger msg\r\n        <Typography variant=\"body2\">\r\n          Now is the time for every good man to come to the aid of his country.\r\n          Now is the time for every good man to come to the aid of his country.\r\n          Now is the time for every good man to come to the aid of his country.\r\n          I hope this works.\r\n          Now is the time for every good man to come to the aid of his country.\r\n          Now is the time for every good man to come to the aid of his country.\r\n          Now is the time for every good man to come to the aid of his country.\r\n        </Typography>\r\n          */}\r\n\r\n      </Paper>\r\n\r\n    </main>\r\n  );\r\n\r\n  // ?? OLD: \r\n  //? return (\r\n  //?   <Container style={commonStyles.container}>\r\n  //?     <Header>\r\n  //?       <Left/>\r\n  //?       <Body>\r\n  //?         <Title>Eatery Nod</Title>\r\n  //?       </Body>\r\n  //?       <Right/>\r\n  //?     </Header>\r\n  //?     <Content contentContainerStyle={{flex: 1, alignItems: 'center', justifyContent:'center'}}>\r\n  //?       <Image style={{width: 100, height: 100}}\r\n  //?              source={require(\"../../../assets/icons/eatery.png\")}/>\r\n  //?       <Spinner color=\"blue\"/>\r\n  //?       <Text>{msg}</Text>\r\n  //?     </Content>\r\n  //?   </Container>\r\n  //? );\r\n}\r\n\r\n// ?? DO THIS but need to install prop-types util\r\n// ? SplashScreen.propTypes = {\r\n// ?   msg:     PropTypes.string,\r\n// ?   classes: PropTypes.object.isRequired,\r\n// ? };\r\n// ? \r\nSplashScreen.defaultProps = {\r\n  msg: '',\r\n};\r\n\r\nexport default withStyles(styles)(SplashScreen);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React    from 'react';\nimport ReactDOM from 'react-dom';\nimport SplashScreen from './util/SplashScreen';\nimport * as serviceWorker from './util/serviceWorker';\n\nfunction App() {\n  const spinMsg = 'WowZee WooWoo ... Now is the time for every good man to come to the aid of his country.';\n  return <SplashScreen msg={spinMsg}/>;\n}\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}